Miskovic i Vlada u komisiji

https://www.csc.kth.se/~viggo/wwwcompendium/node165.html

https://arxiv.org/pdf/2210.09986.pdf
https://www.ac.tuwien.ac.at/files/pub/mayerhofer-22.pdf

https://digital.csic.es/bitstream/10261/282381/1/1-s2.0-S156849462200237X-main.pdf


https://www.sciencedirect.com/science/article/pii/S0952197611001497
https://bmcbioinformatics.biomedcentral.com/articles/10.1186/1471-2105-7-S4-S12
https://upcommons.upc.edu/bitstream/handle/2117/87415/R06-36.pdf?sequence=1&isAllowed=y
https://www.sciencedirect.com/science/article/pii/030439758190075X

Shortest common superstring

Metode:
1. Pretraga sa odsecanjem (Branch and bound)
-- ako si vec nasao dopustivo resenje duzine M i nalazis se na dubini drveta M onda nema smisla
ici dalje u dubinu

Ulaz: 
a) azbuka, npr. {a, c, t, g}
b) ulazne niske koje trebaju da budu pokrivene, npr.:
actgag
aggcta
accgta

jedno dopustivo resenje:
acggctgtag


2. BS -- beam search -- ukratko:
BFS sa maksimalnom sirinom

Beam size = 20

0: {}
1: a c t g
2: aa ac at ag ca cc ct cg ta tc tt tg ga gc gt gg
3: aaa aac ...  (4^3 = 64) --> aac ata acg agg ctg ccc ctg...
4: aaca aact aacc aacg ataa ...

Heuristika -- biram 20 od 64 prema nekoj heuristici

Osmisliti naslov:

Algoritmi za rešavanje problema najkraće zajedničke nadniske (nadsekvence)

Algorithms_For_Solving_Shortest_Common_Supersequence_Problem




Shortest Common Supersequence Problem:
- ako imamo nisku S1 velicine n i nisku S2 velicine m, Shortest Common Supersequence je duzine n + m - len(LCSub(S1,S2)),
gde je LCSub - Longest Common Subsequence  


# MAX DUBINA BRUTE FORCE PRETRAGE

Azbuka (S - oznaka za azbuku) : a, b, c
Duzina najduze reci u skupu (L - oznaka duzine najduze reci) : 4  za ovaj skup npr: Skup = {abc,abcc,a,b}

1. resenje:

Sekvenca koja sigurno sadrzi sve reci iz skupa L:
aaaabbbbcccc
aaaaccccbbbb
bbbbaaaacccc
bbbbccccaaaa
ccccaaaabbbb
ccccbbbbaaaa


Formula za izracunavanje duzine takve sekvence:
3! * (4*3)  = 72 - za primer gore, poprilicno duboko, ali garantuje optimalnu dubinu
|S|! * (L*|S|) - generalno (onda se ovo moze uzeti kao sigurno max dubina do koje ide pretraga)

Onda formula |S|! * (L*|S|) sigurno garantuje da ce se na ovoj ili manjoj dubini naci optimalno resenje.

2. resenje:

Max duzina reci je npr. 4 

aaaabbbbcccc aaaabbbbcccc aaaabbbbcccc aaaabbbbcccc

L * (L * |S|) = 4 * (4 * 3) = 48

3. resenje:

aaaabbbbcccc aaabbbccc aabbcc abc

3*4 + 3*3 + 3*2 + 3*1 = 3 * (4 + 3 + 2 + 1) = 3 * 10 = 30
|S| * sum(from 1 to L) 

4. resenje (najbolje)

abc abc abc abc 

4 * 3 = 12
L * |S| 