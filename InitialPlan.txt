Miskovic i Vlada u komisiji

https://www.csc.kth.se/~viggo/wwwcompendium/node165.html

https://arxiv.org/pdf/2210.09986.pdf
https://www.ac.tuwien.ac.at/files/pub/mayerhofer-22.pdf

https://digital.csic.es/bitstream/10261/282381/1/1-s2.0-S156849462200237X-main.pdf


https://www.sciencedirect.com/science/article/pii/S0952197611001497
https://bmcbioinformatics.biomedcentral.com/articles/10.1186/1471-2105-7-S4-S12
https://upcommons.upc.edu/bitstream/handle/2117/87415/R06-36.pdf?sequence=1&isAllowed=y
https://www.sciencedirect.com/science/article/pii/030439758190075X

Shortest common superstring

Metode:
1. Pretraga sa odsecanjem (Branch and bound)
-- ako si vec nasao dopustivo resenje duzine M i nalazis se na dubini drveta M onda nema smisla
ici dalje u dubinu

Ulaz: 
a) azbuka, npr. {a, c, t, g}
b) ulazne niske koje trebaju da budu pokrivene, npr.:
actgag
aggcta
accgta

jedno dopustivo resenje:
acggctgtag


2. BS -- beam search -- ukratko:
BFS sa maksimalnom sirinom

Beam size = 20

0: {}
1: a c t g
2: aa ac at ag ca cc ct cg ta tc tt tg ga gc gt gg
3: aaa aac ...  (4^3 = 64) --> aac ata acg agg ctg ccc ctg...
4: aaca aact aacc aacg ataa ...

Heuristika -- biram 20 od 64 prema nekoj heuristici

Osmisliti naslov:

Algoritmi za rešavanje problema najkraće zajedničke nadniske (nadsekvence)

Algorithms_For_Solving_Shortest_Common_Supersequence_Problem




Shortest Common Supersequence Problem:
- ako imamo nisku S1 velicine n i nisku S2 velicine m, Shortest Common Supersequence je duzine n + m - len(LCSub(S1,S2)),
gde je LCSub - Longest Common Subsequence  


# MAX DUBINA BRUTE FORCE PRETRAGE

Azbuka (S - oznaka za azbuku) : a, b, c
Duzina najduze reci u skupu (L - oznaka duzine najduze reci) : 4  za ovaj skup npr: Skup = {abc,abcc,a,b}

1. resenje:

Sekvenca koja sigurno sadrzi sve reci iz skupa L:
aaaabbbbcccc
aaaaccccbbbb
bbbbaaaacccc
bbbbccccaaaa
ccccaaaabbbb
ccccbbbbaaaa


Formula za izracunavanje duzine takve sekvence:
3! * (4*3)  = 72 - za primer gore, poprilicno duboko, ali garantuje optimalnu dubinu
|S|! * (L*|S|) - generalno (onda se ovo moze uzeti kao sigurno max dubina do koje ide pretraga)

Onda formula |S|! * (L*|S|) sigurno garantuje da ce se na ovoj ili manjoj dubini naci optimalno resenje.

2. resenje:

Max duzina reci je npr. 4 

aaaabbbbcccc aaaabbbbcccc aaaabbbbcccc aaaabbbbcccc

L * (L * |S|) = 4 * (4 * 3) = 48

3. resenje:

aaaabbbbcccc aaabbbccc aabbcc abc

3*4 + 3*3 + 3*2 + 3*1 = 3 * (4 + 3 + 2 + 1) = 3 * 10 = 30
|S| * sum(from 1 to L) 

4. resenje (najbolje)

abc abc abc abc 

4 * 3 = 12
L * |S| 


1. Testiraj parametar za generisanje sekvenci...
2. Uporedjivanje sa BF: napraviti male slucajne instance tipa 1 ili 2 (5,20 - 6,30 - 7,40) - pustamo i ostale
 metode za ove instance (test korektnosti)
3. Test slucaji tipa 2. za testiranje performansi bs alg
4. std::size_t minimalDepth = (minDepth < bsGreedyMinDepth) ? minDepth : bsGreedyMinDepth;
5. rng.seed(std::chrono::system_clock::now().time_since_epoch().count()); --> podesi seed da uvek bude isti, stavi da bude globalan na
nivou celog programa, i stavi fixan seed --> nekada nadje bolje nekada gore resenje zavisi od ovog seeda i skupa sekvenci!!!
6. takeBetaSequancesGreedyApproach --> heuristiku promeni da broji koliko karaktera je pogodio iz skupa L a ne koliko je celih sekvenci pogodio
7. 


A = {a c t g}
L = {
    accgta,
    ctgaac,
    tcgaac,
    ttgcat
}

Look Ahead Weighted Majority Merge Heuristika (LAWMM(l), l-lookahead) radi ovako:

1. Ako je l = 1 tada algoritam izgleda ovako:

LAWMM(L - skup sekvenci, A - azbuka):
    superSequence = ""
    do until SUM(|Si|) == 0 za Si iz L: - vrti ovaj kod dok sve sekvence iz L ne budu duzine 0 zapravo dok sva slova ne poskidas...
        for alpha in A:
            // tezina slova alpha
            v(alpha | s) = SUM(|Si^|) gde Si iz L, Si = alpha + Si^  --> znaci za svaku sekvencu iz L koja pocinje sa alpha 
                                                                         uzima se duzina ostatka i dodaje na tezinu slova alpha...
        beta = argmax{v(alpha | s) | alpha iz A} - uzima se slovo sa najvecom tezinom
        L = L|beta - skida se izabrano slovo sa svih sekvenci 
        superSequence += beta - dodaje se izabrano slovo na resenje

Ukratko: skidaj slova u svakom koraku i racunaj tezine kao sto je objasnjeno gore, uzmi slovo sa najvecom tezinom,
skini ga sa pocetka sekvenci i dodaj to slovo na resenje...

2. Ako je l = 2+ tada algoritam radi isto samo sto u svakom koraku algoritma uzimamo slovo koje ima najvecu tezinu 
u odnosu na 2+ prolaza WMM(). Ja sam to shvatio na sledeci nacin:
- npr. za l = 2 probaj da skines 'a' izracunaj tezinu i onda skini 'a' sa svih sekvenci iz L sada na takvom redukovanom
skupu L probaj da skidas redom a,t,c,g i racunaj tezine. Zapravo onda dobijamo tezine redom za aa,ac,at,ag. Sada se vrati
ponovo na pocetak i probaj sa 'b'. Skini 'b' sa pocetka sekvenci iz L racunaj tezinu za 'b' sada na takvom redukovanom
skupu L probaj dalje da skidas a,c,t,g i racunaj tezine, dobijamo tezine redom za ba,bc,bt,bg. Nastavi tako dalje za sva slova
azbuke i na kraju dobijamo tezine za sve kombinacije koje su bile moguce uzimamo kombinaciju sa najvecom tezinom recimo da je to
ac = 50 i onda kao najbolje slovo za ukloniti u ovom krugu uzimamo 'a' (to slovo dodajemo na resenje) algoritam radi isto kao ovaj 
gore na dalje.


Zapravo heuristika ce raditi dok ne poskida sva slova sa svih sekvenci iz L.
Ako heuristika za fixan parametar l = k da resenje duzine n tada mi zapravo u svakom od tih n koraka dobijamo
rangirana resenja od najboljeg do najgoreg:
Npr:
1.Korak: a-55 c-40 t-30 g-20 (odradi L=L|a, skini 'a' sa pocetka sekvenci iz L jer je 'a' najbolje ocenjeno slovo)
2.Korak: c-30 a-20 t-15 g-10 (....)
.
.
.
n-ti Korak: c-1 t-0 g-0 a-o (....)


Sada se vracamo na onaj problem da li ja ovo za poznati skup L na pocetku mogu da izracunam unapred i da kasnije koristim 
za ocenjivanje nekih parcijalnih resenje u BeamSearch algoritmu.

Ako imam neko parcijalno resenje recimo "tg" i ako uzmemo one tezine gore koje je heursika izracunala
onda bih mogao da kazem da je tezina za "tg" = 't' + 'g' = 30 + 10 = 40 ali sada vidim gde sam pogresio,
a vi me ispravite ako gresim, tezine koje su izracunate u 2. koraku su tezine koje su dobijene na redukovanom skupu
L = L|a (L kada se skine 'a' sa pocetka svih sekvenci, jer je 'a' bilo najbolje resenje u 1. koraku LAWMM) 
i zapravo ocene u 2. koraku: c-30 a-20 t-15 g-10 vaze samo ako u prvom koraku skinem 'a' iz L, ali ne vaze u slucaju "tg" gde bih 
prvo skidao 't' pa onda dalje nastavljao. Sto dalje znaci da bih ipak za svako parcijalno resenje morao da racunam vrednosti
heuristike, i to bih onda radio na sledeci nacin a vi me opet ispravite ako gresim:

Npr. imamo parcijalno resenje "tg" i skup L-originalan skup sekvenci:
- sada racunaj opet onaj prvi korak kao gore 1.Korak: a-55 c-40 t-30 g-20 znaci Tezina{"tg"} += 30.
- ali sada drugi korak nije isti kao onaj gore sada bih radio L = L|t i na takvom skupu L koji se dobija uklanjanjem 't' sa pocetka
sekvenci bih dalje racunao tezine za redom a,c,t,g i u ovom slucaju bih dobio resenje koje se razlikuje od resenja dobijenog
u 2. koraku: c-30 a-20 t-15 g-10

Dodatak koji planiram da uvedem je sledeci:
- ne zelim da uzimam tezine resenja vec da uzimam rangove, za a-55 c-40 t-30 g-20 dodelio bih redom rangove resenjima
a-1 c-2 t-3 g-4 i tako u svakom koraku bih imao rangove, tada bi za neko parcijalno resenje recimo "tg" imao sumu rangova
recimo "tg" = 3 + 1 = 4. (sada ove sume rangova deluju nezavisno za svako parc. resenje jer ne gledam globalno najbolje resenje
izracunato LAWMM unapred)
Sada bih za svako parc. resenje koje je izabrano (ima ih beamSize) racunao verovatnocu:
Pparc = sumaRangovaParcResenja / SUM(sumaRangovaParcResenja)
Recimo da bih uveo parametar g = 0.2 npr. i onda racunam slucajan broj izmedju [0,1] ako dobijem >= g onda ubacim najbolje resenje 
redukujem skup i ponovo racunam slucajan broj, ako u nekom trenutku dobijem < g onda biram sledece resenje ruletskom selekcijom recimo.

Jer ako ne bih radio na ovaj nacin, onda za gore navden primer:
1.Korak: a-55 c-40 t-30 g-20 
2.Korak: c-30 a-20 t-15 g-10 
.
. 
.

Meni bi algoritam uvek birao najbolje resenje kao da sam pustio LAWMM da radi nezavisno od Beam searcha,
Beam search bi izabrao "ac" kao najbolje resenje i jos bi dodao (beamSize - 1) resenja koja potencijalno daju lufta ali 
mi ova ideja gore deluje okej. 

Ceo ovaj dodatak mi ima smisla da ne bih grubo pratio LAWMM heuristiku vec da uvedem malo lufta, sad dal ce se to pokazati dobro na kraju
ne znam :).

Sada jos ostaje pitanje implementacije:
- lakse bi bilo napraviti funkciju koja racuna LAWMM za neko parc resenje tako sto mu uvek dam ceo skup L,
i on zapravo racuna od pocetka svaki put tako sto redom skida slova i dodeljuje rangove, drugo resenje bi bilo da se cuva
za svako parc. resenje od beamSize resenja skup pokazivaca recimo ili iteratora na pozicije u L u odnosu na to dokle se stiglo,
jer ako je "tg" u skupu onda samo na njega dalje dodajem a,c,t,g i zapravo nema potrebe ponovo racunati rangove za "tg" ali u tom slucaju
treba cuvati sumu rangova koja je do tada izracunata i (beam size * |L|) iteratora, pada mi na pamet da zapravo ne treba ni cuvati listu pokazivaca vec nesto izmedju,
ako dobijemo sekvencu "at" mozemo svaki put da se pomeramo u L za "at" ali da ne racunamo rangove sto nije previse skupo, zapravo rangove
racunamo samo za novo dodata slova a,c,t,g. Odrzavanje liste iteratora mi deluje skoro isto skupo koliko pomeranje u L 
za dati prefiks, i deluje mi jednostavnije za implementaciju ovo pomeranje.

Malo sam oduzio, ali mislim da sam pokrio kljucne nedoumice koje sam imao.

Pozdrav,
Milos Mikovic 1050/2020.


Pitanja : 
1. Nazivi procedura ne trebaju bold? Sta je sa algoritmima, sta ako pozivamo alg iz nekog algoritma?
2. Italic ili ne (eng.)
3. Prilagoditi font koda italic? GrananjeSaOdsecanjem(ε), na sta se tacno misli samo ovde ili
svaki naziv algoritma da bude italic?
4. G = (V, E) ne moze \mathcal jer E ispisuje kao epsilon...



Stefan Miskovic:
- da li da ostane eng italic ili ne?
- Sigma* je skup svih reci nad azbukom?
- NP-tezak umesto NP-kompletan bi trebalo da stoji? strana 2
...








